0x00 C Initialize the stack pointer
0x03 S Zero VRAM from 0x9fff down to 0x8000
0x07 L clear_vram
0x08 C Set the Z flag if the Most Significant Bit of H (and HL) is unset, signaling that HL is past 0x8000 into 0x7fff
0x0a G clear_vram
0x0c S Audio configuration
0x13 C Set 0x80 at address 0xff26  (Turn the Audio Processing Unit on)
0x14 C Set value 0x80 at 0xFF11 (Configure Channel 1 Sound length/Wave pattern duty)
0x18 C Set value 0xf3 at 0xFF12 (Configure Channel 1 Volume Envelope)
0x19 C Set value 0xf3 at 0xFF25 (Selection of Sound output terminal (R/W))
0x1c C Set value 0x77 at 0xFF24 (Channel control / ON-OFF / Volume (R/W))
0x1d S Setting the Palette
0x1f C Set value 0xfc at 0xFF47 (BGP - BG Palette Data (R/W) - Idx 0 is white, others are black)
0x21 S Uncompressing the nintendo logo from the cartridge into VRAM
0x21 C 0x0104 address of the beginning of the Nintendo logo in the cartridge
0x24 C 0x8010 VRAM
0x27 L uncompress_logo
0x27 C Load the current byte of the logo into A
0x28 C Decode the first 4 bits of the current logo byte into VRAM
0x28 G decode_byte_first_half
0x2b C Decode the last 4 bits of the current logo byte into VRAM
0x2b G decode_byte_second_half
0x2e C Move on to the next byte
0x30 C Check if we have finished to load the logo (all 48 bytes)
0x32 G uncompress_logo
0x34 S Copy 8 more Bytes from the cartridge into VRAM
0x34 C The starting point
0x37 C The number of bytes
0x3b C We copy the content of the cartdrige into HL and then INC HL twice (see logo above: We only set the LSB -first byte- for each tile?)
0x39 L copy_next_byte
0x3e G copy_next_byte
0x40 S Setting the background map (#2)
0x40 C tile_id: Id of the tile
0x42 C Setting the tile data manually for 0x9910
0x45 C Loading the location of the tile data in memory
0x48 L next_tile_idÂ 
0x48 C numtile: Number of identical tiles to set to tile_id
0x4a L next_tile
0x4b G End
0x4b C Are we done with the elements?
0x4d C Set the tile to tile_id
0x4f G next_tile
0x51 C We update the lower HL so that we update tile at 0x990f now
0x53 G next_tile_id
0x55 L End
0x55 S Scrolling
0x55 C Scrolling (H) = 0
0x58 C loop idx D = 0x64
0x59 C Set SCY (0xff42 - Scroll Y) to 0x64
0x5d C Set LCDC (0xff40) to 0x91 (Enable LCD, Configure data banks and Background)
0x5f C B is now 1
0x64 L wait_until_vblank
0x64 C Loading LCDC Y-Coordinate (0xff40), column being transferred to the LCD driver
0x66 C Checking if we are at the beginning of VBlank (LY=144)
0x68 C If that's not the case we move back
0x68 G wait_until_vblank
0x95 L decode_byte_first_half
0x95 C Reset C to the compressed value
0x96 L decode_byte_second_half
0x96 C Number of bits to extract from C into A
0x98 L next_bit
0x98 C Save B and C
0x99 C Take most significant bit of C into carry
0x9b C Move carry into the Least significant bit of A
0x9c C Restore B and C (bring back MSB of C)
0x9d C Do again as before
0x9f C Now the MSB of C is doubled into A
0xa1 C Duplicate the next bit in C into A (until we have done this block of 4 and B is 0)
0xa3 C Copy the decompressed byte into RAM twice (A skip A skip: double each pixel, each made of the original value and 0)
0xa1 G next_bit